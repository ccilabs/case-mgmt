{
  "version": 3,
  "sources": ["../schemas/standardFields.ts", "../custom-fields/conditional/index.tsx", "../schemas/case.ts", "../schemas/communication.ts", "../schemas/contact.ts", "../schemas/engagement.ts", "../schemas/file.ts", "../schemas/user.ts", "../schema.ts", "../session.ts", "../keystone.ts"],
  "sourcesContent": ["import { document } from \"@keystone-6/fields-document\";\nimport { relationship } from \"@keystone-6/core/fields\";\n\nexport const NoteField = document({\n  formatting: true,\n  layouts: [\n    [1, 1],\n    [1, 1, 1],\n    [2, 1],\n    [1, 2],\n    [1, 2, 1],\n  ],\n  links: true,\n  dividers: true,\n});\n\nexport const AttachmentField = relationship({\n  ref: \"File\",\n  many: true,\n  ui: {\n    displayMode: \"cards\",\n    cardFields: [\"document\", \"name\", \"createdAt\"],\n    // inlineEdit: { fields: [\"name\", \"document\"] },\n    inlineCreate: { fields: [\"document\", \"name\"] },\n    linkToItem: true,\n    inlineConnect: false,\n    hideCreate: false,\n  },\n});\n", "import {\n  type BaseListTypeInfo,\n  fieldType,\n  type FieldTypeFunc,\n  type CommonFieldConfig,\n  orderDirectionEnum,\n} from \"@keystone-6/core/types\";\nimport { graphql } from \"@keystone-6/core\";\n\ntype TextFieldConfig<ListTypeInfo extends BaseListTypeInfo> =\n  CommonFieldConfig<ListTypeInfo> & {\n    isIndexed?: boolean | \"unique\";\n    dependency: {\n      field: string;\n      minimumValue: number;\n    };\n  };\n\nexport function feedback<ListTypeInfo extends BaseListTypeInfo>({\n  isIndexed,\n  dependency,\n  ...config\n}: TextFieldConfig<ListTypeInfo>): FieldTypeFunc<ListTypeInfo> {\n  return (meta) =>\n    fieldType({\n      kind: \"scalar\",\n      mode: \"optional\",\n      scalar: \"String\",\n      index: isIndexed === true ? \"index\" : isIndexed || undefined,\n    })({\n      ...config,\n      input: {\n        create: {\n          arg: graphql.arg({ type: graphql.String }),\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          resolve(value, context) {\n            return value;\n          },\n        },\n        update: { arg: graphql.arg({ type: graphql.String }) },\n        orderBy: { arg: graphql.arg({ type: orderDirectionEnum }) },\n      },\n      output: graphql.field({\n        type: graphql.String,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resolve({ value, item }, args, context, info) {\n          return value;\n        },\n      }),\n      views: \"./custom-fields/conditional/views\",\n      getAdminMeta() {\n        return {\n          dependency,\n        };\n      },\n    });\n}\n", "import { allowAll } from \"@keystone-6/core/access\";\nimport {\n  integer,\n  timestamp,\n  select,\n  multiselect,\n  calendarDay,\n  virtual,\n} from \"@keystone-6/core/fields\";\n\nimport { graphql, config } from \"@keystone-6/core\";\n\nimport { NoteField, AttachmentField } from \"./standardFields\";\n\nimport { feedback } from \"../custom-fields/conditional\";\nimport { text } from \"../custom-fields/text-field\";\n\nexport default {\n  access: allowAll,\n\n  fields: {\n    // primitive GraphQL type\n    isActive: virtual({\n      field: graphql.field({\n        type: graphql.Boolean,\n        resolve(item) {\n          return item.case_number;\n        },\n      }),\n    }),\n    status: select({\n      options: [\n        { label: \"Open\", value: \"open\" },\n        { label: \"Closed\", value: \"closed\" },\n      ],\n    }),\n\n    case_number: integer({\n      defaultValue: { kind: \"autoincrement\" },\n      validation: {\n        isRequired: true,\n      },\n    }),\n    geographic_area: select({\n      options: [{ label: \"Vancouver Island\", value: \"VancouverIsland\" }],\n    }),\n\n    issues: multiselect({\n      options: [\n        { label: \"youth transitioning\", value: \"YouthTransitioning\" },\n        { label: \"funding\", value: \"Funding\" },\n      ],\n    }),\n\n    rating: integer(),\n\n    feedback: feedback({\n      dependency: {\n        field: \"rating\",\n        minimumValue: 3,\n      },\n      ui: {\n        description: \"Additional feedback as to the rating\",\n      },\n    }),\n\n    action_taken_date: calendarDay({}),\n\n    date_closed: timestamp({}),\n\n    attachments: AttachmentField,\n    notes: NoteField,\n  },\n};\n", "import { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\nimport { group } from \"@keystone-6/core\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  multiselect,\n  file,\n  calendarDay,\n} from \"@keystone-6/core/fields\";\n\nimport { NoteField } from \"./standardFields\";\n\nexport default {\n  access: allowAll,\n\n  fields: {\n    contact: relationship({\n      ref: \"Contact.communications\",\n      ui: {\n        displayMode: \"select\",\n        labelField: \"first_name\",\n        hideCreate: false,\n        searchFields: [\"last_name\", \"first_name\"],\n      },\n    }),\n    individual: relationship({\n      ref: \"Contact\",\n    }),\n    ...group({\n      label: \"Communication Details\",\n      description: \"Further information about the communication\",\n      fields: {\n        communication_date: calendarDay({}),\n        communication_type: select({\n          type: \"enum\",\n          options: [\n            { label: \"phone call\", value: \"PhoneCall\" },\n            { label: \"email\", value: \"Email\" },\n          ],\n        }),\n      },\n    }),\n\n    // cases: relationship({ ref: \"Case.case_number\", many: true }),\n\n    notes: NoteField,\n  },\n};\n", "import { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  multiselect,\n  file,\n} from \"@keystone-6/core/fields\";\n\nimport { NoteField, AttachmentField } from \"./standardFields\";\n\nexport default {\n  access: allowAll,\n\n  // this is the fields for our User list\n  fields: {\n    category: multiselect({\n      type: \"enum\",\n      options: [\n        { label: \"person with disability\", value: \"PersonDisability\" },\n        { label: \"family (mother, father, sibling, other)\", value: \"Family\" },\n        { label: \"service provider\", value: \"ServiceProvider\" },\n      ],\n      defaultValue: [],\n    }),\n\n    category_other: text({ validation: { isRequired: false } }),\n\n    last_name: text({ validation: { isRequired: false } }),\n\n    first_name: text({ validation: { isRequired: false } }),\n\n    email: text({\n      validation: { isRequired: false },\n      // by adding isIndexed: 'unique', we're saying that no user can have the same\n      // email as another user - this may or may not be a good idea for your project\n      //   isIndexed: \"unique\",\n    }),\n\n    phone: text({ validation: { isRequired: false } }),\n\n    indigenous_person: select({\n      type: \"enum\",\n      options: [\n        { label: \"Yes\", value: \"yes\" },\n        { label: \"No\", value: \"no\" },\n      ],\n    }),\n\n    attachments: AttachmentField,\n\n    createdAt: timestamp({\n      // this sets the timestamp to Date.now() when the user is first created\n      defaultValue: { kind: \"now\" },\n    }),\n\n    // cases: relationship({ ref: \"Case.case_number\", many: true }),\n    communications: relationship({\n      ref: \"Communication.contact\",\n      many: true,\n      ui: {\n        displayMode: \"cards\",\n        cardFields: [\"communication_date\", \"contact\", \"individual\"],\n        // inlineEdit: { fields: [\"name\", \"document\"] },\n        //inlineCreate: { fields: [\"document\", \"name\"] },\n        linkToItem: true,\n        inlineConnect: false,\n        hideCreate: false,\n        removeMode: \"none\",\n      },\n    }),\n  },\n};\n", "import { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  multiselect,\n  file,\n} from \"@keystone-6/core/fields\";\n\nimport { NoteField, AttachmentField } from \"./standardFields\";\n\nexport default {\n  access: allowAll,\n\n  fields: {\n    activity: select({\n      type: \"enum\",\n      options: [\n        { label: \"meeting\", value: \"Meeting\" },\n        { label: \"presentation\", value: \"Presentation\" },\n      ],\n    }),\n    location: text({\n      validation: {\n        isRequired: true,\n      },\n    }),\n    issues: multiselect({\n      options: [\n        { label: \"youth transitioning\", value: \"YouthTransitioning\" },\n        { label: \"funding\", value: \"Funding\" },\n        { label: \"mental health\", value: \"MentalHealth\" },\n      ],\n    }),\n    notes: NoteField,\n    attachments: AttachmentField,\n  },\n};\n", "import { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  multiselect,\n  file,\n} from \"@keystone-6/core/fields\";\n\nexport default {\n  access: allowAll,\n\n  fields: {\n    name: text({\n      validation: {\n        isRequired: false,\n      },\n    }),\n    altText: text(),\n    document: file({ storage: \"s3_storage\" }),\n    createdAt: timestamp({\n      defaultValue: { kind: \"now\" },\n    }),\n  },\n};\n", "import { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n} from \"@keystone-6/core/fields\";\n\nexport default {\n  // WARNING\n  //   for this starter project, anyone can create, query, update and delete anything\n  //   if you want to prevent random people on the internet from accessing your data,\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  access: allowAll,\n\n  // this is the fields for our User list\n  fields: {\n    authId: text({ isIndexed: \"unique\" }),\n\n    // by adding isRequired, we enforce that every User should have a name\n    //   if no name is provided, an error will be displayed\n    name: text({ validation: { isRequired: true } }),\n\n    email: text({\n      validation: { isRequired: true },\n      // by adding isIndexed: 'unique', we're saying that no user can have the same\n      // email as another user - this may or may not be a good idea for your project\n      isIndexed: \"unique\",\n    }),\n\n    // we can use this field to see what Posts this User has authored\n    //   more on that in the Post list below\n    // posts: relationship({ ref: \"Post.author\", many: true }),\n\n    createdAt: timestamp({\n      // this sets the timestamp to Date.now() when the user is first created\n      defaultValue: { kind: \"now\" },\n    }),\n  },\n};\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\nimport { graphql, config } from \"@keystone-6/core\";\nimport { Context } from \".keystone/types\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n} from \"@keystone-6/core/fields\";\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from \"@keystone-6/fields-document\";\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from \".keystone/types\";\n\nimport CaseSchema from \"./schemas/case\";\nimport CommunicationSchema from \"./schemas/communication\";\nimport ContactSchema from \"./schemas/contact\";\nimport EngagementSchema from \"./schemas/engagement\";\nimport FileSchema from \"./schemas/file\";\nimport UserSchema from \"./schemas/user\";\n\nexport const lists: Lists = {\n  User: list(UserSchema),\n\n  // Post: list({\n  //   // WARNING\n  //   //   for this starter project, anyone can create, query, update and delete anything\n  //   //   if you want to prevent random people on the internet from accessing your data,\n  //   //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  //   access: allowAll,\n\n  //   // this is the fields for our Post list\n  //   fields: {\n  //     title: text({ validation: { isRequired: true } }),\n\n  //     // the document field can be used for making rich editable content\n  //     //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n  //     content: document({\n  //       formatting: true,\n  //       layouts: [\n  //         [1, 1],\n  //         [1, 1, 1],\n  //         [2, 1],\n  //         [1, 2],\n  //         [1, 2, 1],\n  //       ],\n  //       links: true,\n  //       dividers: true,\n  //     }),\n\n  //     // with this field, you can set a User as the author for a Post\n  //     author: relationship({\n  //       // we could have used 'User', but then the relationship would only be 1-way\n  //       ref: \"User.posts\",\n\n  //       // this is some customisations for changing how this will look in the AdminUI\n  //       ui: {\n  //         displayMode: \"cards\",\n  //         cardFields: [\"name\", \"email\"],\n  //         inlineEdit: { fields: [\"name\", \"email\"] },\n  //         linkToItem: true,\n  //         inlineConnect: true,\n  //       },\n\n  //       // a Post can only have one author\n  //       //   this is the default, but we show it here for verbosity\n  //       many: false,\n  //     }),\n\n  //     // with this field, you can add some Tags to Posts\n  //     tags: relationship({\n  //       // we could have used 'Tag', but then the relationship would only be 1-way\n  //       ref: \"Tag.posts\",\n\n  //       // a Post can have many Tags, not just one\n  //       many: true,\n\n  //       // this is some customisations for changing how this will look in the AdminUI\n  //       ui: {\n  //         displayMode: \"cards\",\n  //         cardFields: [\"name\"],\n  //         inlineEdit: { fields: [\"name\"] },\n  //         linkToItem: true,\n  //         inlineConnect: true,\n  //         inlineCreate: { fields: [\"name\"] },\n  //       },\n  //     }),\n  //   },\n  // }),\n\n  // this last list is our Tag list, it only has a name field for now\n  // Tag: list({\n  //   // WARNING\n  //   //   for this starter project, anyone can create, query, update and delete anything\n  //   //   if you want to prevent random people on the internet from accessing your data,\n  //   //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  //   access: allowAll,\n\n  //   // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\n  //   ui: {\n  //     isHidden: true,\n  //   },\n\n  //   // this is the fields for our Tag list\n  //   fields: {\n  //     name: text(),\n  //     // this can be helpful to find out all the Posts associated with a Tag\n  //     posts: relationship({ ref: \"Post.tags\", many: true }),\n  //   },\n  // }),\n\n  File: list(FileSchema),\n  Contact: list(ContactSchema),\n  Communication: list(CommunicationSchema),\n  Case: list(CaseSchema),\n  Engagement: list(EngagementSchema),\n};\n\nexport const extendGraphqlSchema = graphql.extend((base) => {\n  const Statistics = graphql.object<{ authorId: string }>()({\n    name: \"Statistics\",\n    fields: {\n      draft: graphql.field({\n        type: graphql.Int,\n        resolve({ authorId }, args, context: Context) {\n          return context.query.User.count({\n            where: {\n              // status: { equals: \"draft\" },\n            },\n          });\n        },\n      }),\n      published: graphql.field({\n        type: graphql.Int,\n        resolve({ authorId }, args, context: Context) {\n          return context.query.User.count({\n            where: {\n              // status: { equals: \"published\" },\n            },\n          });\n        },\n      }),\n      latest: graphql.field({\n        type: base.object(\"User\"),\n        async resolve({ authorId }, args, context: Context) {\n          const [post] = await context.db.User.findMany({\n            take: 1,\n            orderBy: { publishDate: \"desc\" },\n          });\n          return post;\n        },\n      }),\n    },\n  });\n\n  return {\n    query: {\n      groupedPosts: graphql.field({\n        type: Statistics,\n        // args: { id: graphql.arg({ type: graphql.nonNull(graphql.ID) }) },\n        resolve(source, {}, context: Context) {\n          return { authorId: \"2\" };\n        },\n      }),\n    },\n  };\n});\n", "import { randomBytes } from \"crypto\";\nimport { getContext } from \"@keystone-6/core/context\";\nimport { getServerSession } from \"next-auth/next\";\nimport type { DefaultJWT } from \"next-auth/jwt\";\nimport type { DefaultSession, DefaultUser } from \"next-auth\";\nimport KeycloakProvider from \"next-auth/providers/keycloak\";\nimport type { Context } from \".keystone/types\";\n\n// WARNING: this example is for demonstration purposes only\n//   as with each of our examples, it has not been vetted\n//   or tested for any particular usage\n\n// WARNING: you need to change this\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== \"production\") {\n  sessionSecret = randomBytes(32).toString(\"hex\");\n}\n\nlet _keystoneContext: Context = (globalThis as any)._keystoneContext;\n\nasync function getKeystoneContext() {\n  if (_keystoneContext) return _keystoneContext;\n\n  // TODO: this could probably be better\n  _keystoneContext = getContext(\n    (await import(\"./keystone\")).default,\n    // We use the prisma client from the .myprisma folder in order to support multiple Prisma Clients in our examples\n    // your project will only have one Prisma Client, so you can use the following instead:\n    // await import('@primsa/client')\n    await import(\"@prisma/client\")\n  );\n  if (process.env.NODE_ENV !== \"production\") {\n    (globalThis as any)._keystoneContext = _keystoneContext;\n  }\n  return _keystoneContext;\n}\n\n// see https://next-auth.js.org/configuration/options for more\nexport const nextAuthOptions = {\n  secret: sessionSecret,\n  callbacks: {\n    async signIn({ user }: { user: DefaultUser }) {\n      // console.error('next-auth signIn', { user, account, profile });\n      const sudoContext = (await getKeystoneContext()).sudo();\n\n      // check if the user exists in keystone\n      const author = await sudoContext.query.User.findOne({\n        where: { authId: user.id },\n      });\n\n      // if not, sign up\n      if (!author) {\n        await sudoContext.query.User.createOne({\n          data: {\n            authId: user.id,\n            name: user.name,\n            email: user.email,\n          },\n        });\n      }\n\n      return true; // accept the signin\n    },\n\n    async session({\n      session,\n      token,\n    }: {\n      session: DefaultSession; // required by next-auth, not by us\n      token: DefaultJWT;\n    }) {\n      // console.error('next-auth session', { session, token });\n      return {\n        ...session,\n        keystone: {\n          authId: token.sub,\n        },\n      };\n    },\n  },\n  providers: [\n    // allow anyone with a GitHub account to sign up as an author\n    KeycloakProvider({\n      clientId: process.env.KEYCLOAK_ID,\n      clientSecret: process.env.KEYCLOAK_SECRET,\n      issuer: process.env.KEYCLOAK_ISSUER,\n    }),\n  ],\n};\n\nexport type Session = {\n  id: string;\n};\n\nexport const nextAuthSessionStrategy = {\n  async get({ context }: { context: Context }) {\n    const { req, res } = context;\n    const { headers } = req ?? {};\n    if (!headers?.cookie || !res) return;\n\n    // next-auth needs a different cookies structure\n    const cookies: Record<string, string> = {};\n    for (const part of headers.cookie.split(\";\")) {\n      const [key, value] = part.trim().split(\"=\");\n      cookies[key] = decodeURIComponent(value);\n    }\n\n    const nextAuthSession = await getServerSession(\n      { headers, cookies } as any,\n      res,\n      nextAuthOptions\n    );\n    if (!nextAuthSession) return;\n\n    const { authId } = nextAuthSession.keystone;\n    if (!authId) return;\n\n    const author = await context.sudo().db.User.findOne({\n      where: { authId },\n    });\n    if (!author) return;\n\n    return { id: author.id };\n  },\n\n  // we don't need these as next-auth handle start and end for us\n  async start() {},\n  async end() {},\n};\n", "// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from \"@keystone-6/core\";\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists, extendGraphqlSchema } from \"./schema\";\n\nimport { type Session, nextAuthSessionStrategy } from \"./session\";\nimport type { TypeInfo } from \".keystone/types\";\n\nexport default config<TypeInfo<Session>>({\n  db: {\n    provider: \"postgresql\",\n    url: process.env.DATABASE_URL || \"\",\n  },\n  ui: {\n    // the following api routes are required for nextauth.js\n    publicPages: [\n      \"/api/auth/csrf\",\n      \"/api/auth/signin\",\n      \"/api/auth/callback\",\n      \"/api/auth/session\",\n      \"/api/auth/providers\",\n      \"/api/auth/signout\",\n      \"/api/auth/error\",\n\n      // each provider will need a separate callback and signin page listed here\n      \"/api/auth/signin/keycloak\",\n      \"/api/auth/callback/keycloak\",\n    ],\n\n    // adding page middleware ensures that users are redirected to the signin page if they are not signed in.\n    pageMiddleware: async ({ wasAccessAllowed }) => {\n      if (wasAccessAllowed) return;\n      return {\n        kind: \"redirect\",\n        to: \"/api/auth/signin\",\n      };\n    },\n  },\n  lists,\n  session: nextAuthSessionStrategy,\n  extendGraphqlSchema,\n  storage: {\n    s3_storage: {\n      kind: \"s3\",\n      type: \"file\",\n      bucketName: process.env.S3_BUCKET || \"\",\n      endpoint: process.env.S3_ENDPOINT || \"\",\n      region: process.env.S3_REGION || \"\",\n      accessKeyId: process.env.S3_ACCESS_KEY_ID || \"\",\n      secretAccessKey: process.env.S3_SECRET_ACCESS_KEY || \"\",\n      proxied: { baseUrl: \"/files-proxy\" },\n      signed: { expiry: 5000 },\n      forcePathStyle: true,\n    },\n  },\n  server: {\n    extendExpressApp: (app, commonContext) => {\n      app.get(\"/api/contact\", async (req, res) => {\n        const context = await commonContext.withRequest(req, res);\n        const contacts = await context.prisma.contact.groupBy({\n          by: [\"category\"],\n          _max: { email: true },\n          _count: { email: true, id: true },\n        });\n        res.json(contacts);\n      });\n    },\n  },\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4BACA,eAEa,WAaA;AAhBb;AAAA;AAAA;AAAA,6BAAyB;AACzB,oBAA6B;AAEtB,IAAM,gBAAY,iCAAS;AAAA,MAChC,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,CAAC,GAAG,CAAC;AAAA,QACL,CAAC,GAAG,GAAG,CAAC;AAAA,QACR,CAAC,GAAG,CAAC;AAAA,QACL,CAAC,GAAG,CAAC;AAAA,QACL,CAAC,GAAG,GAAG,CAAC;AAAA,MACV;AAAA,MACA,OAAO;AAAA,MACP,UAAU;AAAA,IACZ,CAAC;AAEM,IAAM,sBAAkB,4BAAa;AAAA,MAC1C,KAAK;AAAA,MACL,MAAM;AAAA,MACN,IAAI;AAAA,QACF,aAAa;AAAA,QACb,YAAY,CAAC,YAAY,QAAQ,WAAW;AAAA;AAAA,QAE5C,cAAc,EAAE,QAAQ,CAAC,YAAY,MAAM,EAAE;AAAA,QAC7C,YAAY;AAAA,QACZ,eAAe;AAAA,QACf,YAAY;AAAA,MACd;AAAA,IACF,CAAC;AAAA;AAAA;;;ACVM,SAAS,SAAgD;AAAA,EAC9D;AAAA,EACA;AAAA,EACA,GAAGA;AACL,GAA+D;AAC7D,SAAO,CAAC,aACN,wBAAU;AAAA,IACR,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,OAAO,cAAc,OAAO,UAAU,aAAa;AAAA,EACrD,CAAC,EAAE;AAAA,IACD,GAAGA;AAAA,IACH,OAAO;AAAA,MACL,QAAQ;AAAA,QACN,KAAK,oBAAQ,IAAI,EAAE,MAAM,oBAAQ,OAAO,CAAC;AAAA;AAAA,QAEzC,QAAQ,OAAO,SAAS;AACtB,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,QAAQ,EAAE,KAAK,oBAAQ,IAAI,EAAE,MAAM,oBAAQ,OAAO,CAAC,EAAE;AAAA,MACrD,SAAS,EAAE,KAAK,oBAAQ,IAAI,EAAE,MAAM,gCAAmB,CAAC,EAAE;AAAA,IAC5D;AAAA,IACA,QAAQ,oBAAQ,MAAM;AAAA,MACpB,MAAM,oBAAQ;AAAA;AAAA,MAEd,QAAQ,EAAE,OAAO,KAAK,GAAG,MAAM,SAAS,MAAM;AAC5C,eAAO;AAAA,MACT;AAAA,IACF,CAAC;AAAA,IACD,OAAO;AAAA,IACP,eAAe;AACb,aAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AACL;AAxDA,kBAOA;AAPA;AAAA;AAAA;AAAA,mBAMO;AACP,kBAAwB;AAAA;AAAA;;;ACPxB,mBACAC,gBASAC,cAOO;AAjBP;AAAA;AAAA;AAAA,oBAAyB;AACzB,IAAAD,iBAOO;AAEP,IAAAC,eAAgC;AAEhC;AAEA;AAGA,IAAO,eAAQ;AAAA,MACb,QAAQ;AAAA,MAER,QAAQ;AAAA;AAAA,QAEN,cAAU,wBAAQ;AAAA,UAChB,OAAO,qBAAQ,MAAM;AAAA,YACnB,MAAM,qBAAQ;AAAA,YACd,QAAQ,MAAM;AACZ,qBAAO,KAAK;AAAA,YACd;AAAA,UACF,CAAC;AAAA,QACH,CAAC;AAAA,QACD,YAAQ,uBAAO;AAAA,UACb,SAAS;AAAA,YACP,EAAE,OAAO,QAAQ,OAAO,OAAO;AAAA,YAC/B,EAAE,OAAO,UAAU,OAAO,SAAS;AAAA,UACrC;AAAA,QACF,CAAC;AAAA,QAED,iBAAa,wBAAQ;AAAA,UACnB,cAAc,EAAE,MAAM,gBAAgB;AAAA,UACtC,YAAY;AAAA,YACV,YAAY;AAAA,UACd;AAAA,QACF,CAAC;AAAA,QACD,qBAAiB,uBAAO;AAAA,UACtB,SAAS,CAAC,EAAE,OAAO,oBAAoB,OAAO,kBAAkB,CAAC;AAAA,QACnE,CAAC;AAAA,QAED,YAAQ,4BAAY;AAAA,UAClB,SAAS;AAAA,YACP,EAAE,OAAO,uBAAuB,OAAO,qBAAqB;AAAA,YAC5D,EAAE,OAAO,WAAW,OAAO,UAAU;AAAA,UACvC;AAAA,QACF,CAAC;AAAA,QAED,YAAQ,wBAAQ;AAAA,QAEhB,UAAU,SAAS;AAAA,UACjB,YAAY;AAAA,YACV,OAAO;AAAA,YACP,cAAc;AAAA,UAChB;AAAA,UACA,IAAI;AAAA,YACF,aAAa;AAAA,UACf;AAAA,QACF,CAAC;AAAA,QAED,uBAAmB,4BAAY,CAAC,CAAC;AAAA,QAEjC,iBAAa,0BAAU,CAAC,CAAC;AAAA,QAEzB,aAAa;AAAA,QACb,OAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;ACzEA,IACAC,gBAEAC,cAIAC,gBAaO;AApBP;AAAA;AAAA;AACA,IAAAF,iBAAyB;AAEzB,IAAAC,eAAsB;AAItB,IAAAC,iBASO;AAEP;AAEA,IAAO,wBAAQ;AAAA,MACb,QAAQ;AAAA,MAER,QAAQ;AAAA,QACN,aAAS,6BAAa;AAAA,UACpB,KAAK;AAAA,UACL,IAAI;AAAA,YACF,aAAa;AAAA,YACb,YAAY;AAAA,YACZ,YAAY;AAAA,YACZ,cAAc,CAAC,aAAa,YAAY;AAAA,UAC1C;AAAA,QACF,CAAC;AAAA,QACD,gBAAY,6BAAa;AAAA,UACvB,KAAK;AAAA,QACP,CAAC;AAAA,QACD,OAAG,oBAAM;AAAA,UACP,OAAO;AAAA,UACP,aAAa;AAAA,UACb,QAAQ;AAAA,YACN,wBAAoB,4BAAY,CAAC,CAAC;AAAA,YAClC,wBAAoB,uBAAO;AAAA,cACzB,MAAM;AAAA,cACN,SAAS;AAAA,gBACP,EAAE,OAAO,cAAc,OAAO,YAAY;AAAA,gBAC1C,EAAE,OAAO,SAAS,OAAO,QAAQ;AAAA,cACnC;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF,CAAC;AAAA;AAAA,QAID,OAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;ACvDA,IACAC,gBAIAC,gBAYO;AAjBP;AAAA;AAAA;AACA,IAAAD,iBAAyB;AAIzB,IAAAC,iBAQO;AAEP;AAEA,IAAO,kBAAQ;AAAA,MACb,QAAQ;AAAA;AAAA,MAGR,QAAQ;AAAA,QACN,cAAU,4BAAY;AAAA,UACpB,MAAM;AAAA,UACN,SAAS;AAAA,YACP,EAAE,OAAO,0BAA0B,OAAO,mBAAmB;AAAA,YAC7D,EAAE,OAAO,2CAA2C,OAAO,SAAS;AAAA,YACpE,EAAE,OAAO,oBAAoB,OAAO,kBAAkB;AAAA,UACxD;AAAA,UACA,cAAc,CAAC;AAAA,QACjB,CAAC;AAAA,QAED,oBAAgB,qBAAK,EAAE,YAAY,EAAE,YAAY,MAAM,EAAE,CAAC;AAAA,QAE1D,eAAW,qBAAK,EAAE,YAAY,EAAE,YAAY,MAAM,EAAE,CAAC;AAAA,QAErD,gBAAY,qBAAK,EAAE,YAAY,EAAE,YAAY,MAAM,EAAE,CAAC;AAAA,QAEtD,WAAO,qBAAK;AAAA,UACV,YAAY,EAAE,YAAY,MAAM;AAAA;AAAA;AAAA;AAAA,QAIlC,CAAC;AAAA,QAED,WAAO,qBAAK,EAAE,YAAY,EAAE,YAAY,MAAM,EAAE,CAAC;AAAA,QAEjD,uBAAmB,uBAAO;AAAA,UACxB,MAAM;AAAA,UACN,SAAS;AAAA,YACP,EAAE,OAAO,OAAO,OAAO,MAAM;AAAA,YAC7B,EAAE,OAAO,MAAM,OAAO,KAAK;AAAA,UAC7B;AAAA,QACF,CAAC;AAAA,QAED,aAAa;AAAA,QAEb,eAAW,0BAAU;AAAA;AAAA,UAEnB,cAAc,EAAE,MAAM,MAAM;AAAA,QAC9B,CAAC;AAAA;AAAA,QAGD,oBAAgB,6BAAa;AAAA,UAC3B,KAAK;AAAA,UACL,MAAM;AAAA,UACN,IAAI;AAAA,YACF,aAAa;AAAA,YACb,YAAY,CAAC,sBAAsB,WAAW,YAAY;AAAA;AAAA;AAAA,YAG1D,YAAY;AAAA,YACZ,eAAe;AAAA,YACf,YAAY;AAAA,YACZ,YAAY;AAAA,UACd;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA;AAAA;;;AC9EA,IACAC,gBAIAC,gBAYO;AAjBP;AAAA;AAAA;AACA,IAAAD,iBAAyB;AAIzB,IAAAC,iBAQO;AAEP;AAEA,IAAO,qBAAQ;AAAA,MACb,QAAQ;AAAA,MAER,QAAQ;AAAA,QACN,cAAU,uBAAO;AAAA,UACf,MAAM;AAAA,UACN,SAAS;AAAA,YACP,EAAE,OAAO,WAAW,OAAO,UAAU;AAAA,YACrC,EAAE,OAAO,gBAAgB,OAAO,eAAe;AAAA,UACjD;AAAA,QACF,CAAC;AAAA,QACD,cAAU,qBAAK;AAAA,UACb,YAAY;AAAA,YACV,YAAY;AAAA,UACd;AAAA,QACF,CAAC;AAAA,QACD,YAAQ,4BAAY;AAAA,UAClB,SAAS;AAAA,YACP,EAAE,OAAO,uBAAuB,OAAO,qBAAqB;AAAA,YAC5D,EAAE,OAAO,WAAW,OAAO,UAAU;AAAA,YACrC,EAAE,OAAO,iBAAiB,OAAO,eAAe;AAAA,UAClD;AAAA,QACF,CAAC;AAAA,QACD,OAAO;AAAA,QACP,aAAa;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;AC3CA,IACAC,gBAIAC,gBAUO;AAfP;AAAA;AAAA;AACA,IAAAD,iBAAyB;AAIzB,IAAAC,iBAQO;AAEP,IAAO,eAAQ;AAAA,MACb,QAAQ;AAAA,MAER,QAAQ;AAAA,QACN,UAAM,qBAAK;AAAA,UACT,YAAY;AAAA,YACV,YAAY;AAAA,UACd;AAAA,QACF,CAAC;AAAA,QACD,aAAS,qBAAK;AAAA,QACd,cAAU,qBAAK,EAAE,SAAS,aAAa,CAAC;AAAA,QACxC,eAAW,0BAAU;AAAA,UACnB,cAAc,EAAE,MAAM,MAAM;AAAA,QAC9B,CAAC;AAAA,MACH;AAAA,IACF;AAAA;AAAA;;;AC9BA,IACAC,gBAIAC,gBAQO;AAbP;AAAA;AAAA;AACA,IAAAD,iBAAyB;AAIzB,IAAAC,iBAMO;AAEP,IAAO,eAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,MAKb,QAAQ;AAAA;AAAA,MAGR,QAAQ;AAAA,QACN,YAAQ,qBAAK,EAAE,WAAW,SAAS,CAAC;AAAA;AAAA;AAAA,QAIpC,UAAM,qBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,QAE/C,WAAO,qBAAK;AAAA,UACV,YAAY,EAAE,YAAY,KAAK;AAAA;AAAA;AAAA,UAG/B,WAAW;AAAA,QACb,CAAC;AAAA;AAAA;AAAA;AAAA,QAMD,eAAW,0BAAU;AAAA;AAAA,UAEnB,cAAc,EAAE,MAAM,MAAM;AAAA,QAC9B,CAAC;AAAA,MACH;AAAA,IACF;AAAA;AAAA;;;AC5CA,IAOAC,cAGAA,cA4Ba,OAiGA;AAvIb;AAAA;AAAA;AAOA,IAAAA,eAAqB;AAGrB,IAAAA,eAAgC;AAqBhC;AACA;AACA;AACA;AACA;AACA;AAEO,IAAM,QAAe;AAAA,MAC1B,UAAM,mBAAK,YAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAyFrB,UAAM,mBAAK,YAAU;AAAA,MACrB,aAAS,mBAAK,eAAa;AAAA,MAC3B,mBAAe,mBAAK,qBAAmB;AAAA,MACvC,UAAM,mBAAK,YAAU;AAAA,MACrB,gBAAY,mBAAK,kBAAgB;AAAA,IACnC;AAEO,IAAM,sBAAsB,qBAAQ,OAAO,CAAC,SAAS;AAC1D,YAAM,aAAa,qBAAQ,OAA6B,EAAE;AAAA,QACxD,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,OAAO,qBAAQ,MAAM;AAAA,YACnB,MAAM,qBAAQ;AAAA,YACd,QAAQ,EAAE,SAAS,GAAG,MAAM,SAAkB;AAC5C,qBAAO,QAAQ,MAAM,KAAK,MAAM;AAAA,gBAC9B,OAAO;AAAA;AAAA,gBAEP;AAAA,cACF,CAAC;AAAA,YACH;AAAA,UACF,CAAC;AAAA,UACD,WAAW,qBAAQ,MAAM;AAAA,YACvB,MAAM,qBAAQ;AAAA,YACd,QAAQ,EAAE,SAAS,GAAG,MAAM,SAAkB;AAC5C,qBAAO,QAAQ,MAAM,KAAK,MAAM;AAAA,gBAC9B,OAAO;AAAA;AAAA,gBAEP;AAAA,cACF,CAAC;AAAA,YACH;AAAA,UACF,CAAC;AAAA,UACD,QAAQ,qBAAQ,MAAM;AAAA,YACpB,MAAM,KAAK,OAAO,MAAM;AAAA,YACxB,MAAM,QAAQ,EAAE,SAAS,GAAG,MAAM,SAAkB;AAClD,oBAAM,CAAC,IAAI,IAAI,MAAM,QAAQ,GAAG,KAAK,SAAS;AAAA,gBAC5C,MAAM;AAAA,gBACN,SAAS,EAAE,aAAa,OAAO;AAAA,cACjC,CAAC;AACD,qBAAO;AAAA,YACT;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAED,aAAO;AAAA,QACL,OAAO;AAAA,UACL,cAAc,qBAAQ,MAAM;AAAA,YAC1B,MAAM;AAAA;AAAA,YAEN,QAAQ,QAAQ,CAAC,GAAG,SAAkB;AACpC,qBAAO,EAAE,UAAU,IAAI;AAAA,YACzB;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF,CAAC;AAAA;AAAA;;;ACnKD,eAAe,qBAAqB;AAClC,MAAI;AAAkB,WAAO;AAG7B,yBAAmB;AAAA,KAChB,MAAM,mEAAsB;AAAA;AAAA;AAAA;AAAA,IAI7B,MAAM,OAAO,gBAAgB;AAAA,EAC/B;AACA,MAAI,QAAQ,IAAI,aAAa,cAAc;AACzC,IAAC,WAAmB,mBAAmB;AAAA,EACzC;AACA,SAAO;AACT;AAnCA,mBACA,gBACA,aAGA,iBAQI,eAKA,kBAoBS,iBAwDA;AA9Fb;AAAA;AAAA;AAAA,oBAA4B;AAC5B,qBAA2B;AAC3B,kBAAiC;AAGjC,sBAA6B;AAQ7B,IAAI,gBAAgB,QAAQ,IAAI;AAChC,QAAI,CAAC,iBAAiB,QAAQ,IAAI,aAAa,cAAc;AAC3D,0BAAgB,2BAAY,EAAE,EAAE,SAAS,KAAK;AAAA,IAChD;AAEA,IAAI,mBAA6B,WAAmB;AAoB7C,IAAM,kBAAkB;AAAA,MAC7B,QAAQ;AAAA,MACR,WAAW;AAAA,QACT,MAAM,OAAO,EAAE,KAAK,GAA0B;AAE5C,gBAAM,eAAe,MAAM,mBAAmB,GAAG,KAAK;AAGtD,gBAAM,SAAS,MAAM,YAAY,MAAM,KAAK,QAAQ;AAAA,YAClD,OAAO,EAAE,QAAQ,KAAK,GAAG;AAAA,UAC3B,CAAC;AAGD,cAAI,CAAC,QAAQ;AACX,kBAAM,YAAY,MAAM,KAAK,UAAU;AAAA,cACrC,MAAM;AAAA,gBACJ,QAAQ,KAAK;AAAA,gBACb,MAAM,KAAK;AAAA,gBACX,OAAO,KAAK;AAAA,cACd;AAAA,YACF,CAAC;AAAA,UACH;AAEA,iBAAO;AAAA,QACT;AAAA,QAEA,MAAM,QAAQ;AAAA,UACZ;AAAA,UACA;AAAA,QACF,GAGG;AAED,iBAAO;AAAA,YACL,GAAG;AAAA,YACH,UAAU;AAAA,cACR,QAAQ,MAAM;AAAA,YAChB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,WAAW;AAAA;AAAA,YAET,gBAAAC,SAAiB;AAAA,UACf,UAAU,QAAQ,IAAI;AAAA,UACtB,cAAc,QAAQ,IAAI;AAAA,UAC1B,QAAQ,QAAQ,IAAI;AAAA,QACtB,CAAC;AAAA,MACH;AAAA,IACF;AAMO,IAAM,0BAA0B;AAAA,MACrC,MAAM,IAAI,EAAE,QAAQ,GAAyB;AAC3C,cAAM,EAAE,KAAK,IAAI,IAAI;AACrB,cAAM,EAAE,QAAQ,IAAI,OAAO,CAAC;AAC5B,YAAI,CAAC,SAAS,UAAU,CAAC;AAAK;AAG9B,cAAM,UAAkC,CAAC;AACzC,mBAAW,QAAQ,QAAQ,OAAO,MAAM,GAAG,GAAG;AAC5C,gBAAM,CAAC,KAAK,KAAK,IAAI,KAAK,KAAK,EAAE,MAAM,GAAG;AAC1C,kBAAQ,GAAG,IAAI,mBAAmB,KAAK;AAAA,QACzC;AAEA,cAAM,kBAAkB,UAAM;AAAA,UAC5B,EAAE,SAAS,QAAQ;AAAA,UACnB;AAAA,UACA;AAAA,QACF;AACA,YAAI,CAAC;AAAiB;AAEtB,cAAM,EAAE,OAAO,IAAI,gBAAgB;AACnC,YAAI,CAAC;AAAQ;AAEb,cAAM,SAAS,MAAM,QAAQ,KAAK,EAAE,GAAG,KAAK,QAAQ;AAAA,UAClD,OAAO,EAAE,OAAO;AAAA,QAClB,CAAC;AACD,YAAI,CAAC;AAAQ;AAEb,eAAO,EAAE,IAAI,OAAO,GAAG;AAAA,MACzB;AAAA;AAAA,MAGA,MAAM,QAAQ;AAAA,MAAC;AAAA,MACf,MAAM,MAAM;AAAA,MAAC;AAAA,IACf;AAAA;AAAA;;;AChIA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOAC,cAQO;AAfP;AAAA;AAOA,IAAAA,eAAuB;AAGvB;AAEA;AAGA,IAAO,uBAAQ,qBAA0B;AAAA,MACvC,IAAI;AAAA,QACF,UAAU;AAAA,QACV,KAAK,QAAQ,IAAI,gBAAgB;AAAA,MACnC;AAAA,MACA,IAAI;AAAA;AAAA,QAEF,aAAa;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA;AAAA,UAGA;AAAA,UACA;AAAA,QACF;AAAA;AAAA,QAGA,gBAAgB,OAAO,EAAE,iBAAiB,MAAM;AAC9C,cAAI;AAAkB;AACtB,iBAAO;AAAA,YACL,MAAM;AAAA,YACN,IAAI;AAAA,UACN;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,MACA,SAAS;AAAA,MACT;AAAA,MACA,SAAS;AAAA,QACP,YAAY;AAAA,UACV,MAAM;AAAA,UACN,MAAM;AAAA,UACN,YAAY,QAAQ,IAAI,aAAa;AAAA,UACrC,UAAU,QAAQ,IAAI,eAAe;AAAA,UACrC,QAAQ,QAAQ,IAAI,aAAa;AAAA,UACjC,aAAa,QAAQ,IAAI,oBAAoB;AAAA,UAC7C,iBAAiB,QAAQ,IAAI,wBAAwB;AAAA,UACrD,SAAS,EAAE,SAAS,eAAe;AAAA,UACnC,QAAQ,EAAE,QAAQ,IAAK;AAAA,UACvB,gBAAgB;AAAA,QAClB;AAAA,MACF;AAAA,MACA,QAAQ;AAAA,QACN,kBAAkB,CAAC,KAAK,kBAAkB;AACxC,cAAI,IAAI,gBAAgB,OAAO,KAAK,QAAQ;AAC1C,kBAAM,UAAU,MAAM,cAAc,YAAY,KAAK,GAAG;AACxD,kBAAM,WAAW,MAAM,QAAQ,OAAO,QAAQ,QAAQ;AAAA,cACpD,IAAI,CAAC,UAAU;AAAA,cACf,MAAM,EAAE,OAAO,KAAK;AAAA,cACpB,QAAQ,EAAE,OAAO,MAAM,IAAI,KAAK;AAAA,YAClC,CAAC;AACD,gBAAI,KAAK,QAAQ;AAAA,UACnB,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF,CAAC;AAAA;AAAA;",
  "names": ["config", "import_fields", "import_core", "import_access", "import_core", "import_fields", "import_access", "import_fields", "import_access", "import_fields", "import_access", "import_fields", "import_access", "import_fields", "import_core", "KeycloakProvider", "import_core"]
}
