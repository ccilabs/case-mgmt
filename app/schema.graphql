# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  authId: String
  name: String
  email: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  authId: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  authId: StringFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  authId: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  authId: String
  name: String
  email: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  authId: String
  name: String
  email: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type File {
  id: ID!
  name: String
  altText: String
  document: FileFieldOutput
  createdAt: DateTime
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  name: StringFilter
  altText: StringFilter
  createdAt: DateTimeNullableFilter
}

input FileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  altText: OrderDirection
  createdAt: OrderDirection
}

input FileUpdateInput {
  name: String
  altText: String
  document: FileFieldInput
  createdAt: DateTime
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  name: String
  altText: String
  document: FileFieldInput
  createdAt: DateTime
}

type Contact {
  id: ID!
  category: [ContactCategoryType!]
  category_other: String
  last_name: String
  first_name: String
  email: String
  phone: String
  indigenous_person: ContactIndigenousPersonType
  attachments(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  attachmentsCount(where: FileWhereInput! = {}): Int
  createdAt: DateTime
  communications(where: CommunicationWhereInput! = {}, orderBy: [CommunicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunicationWhereUniqueInput): [Communication!]
  communicationsCount(where: CommunicationWhereInput! = {}): Int
}

enum ContactCategoryType {
  PersonDisability
  Family
  ServiceProvider
}

enum ContactIndigenousPersonType {
  yes
  no
}

input ContactWhereUniqueInput {
  id: ID
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  id: IDFilter
  category_other: StringFilter
  last_name: StringFilter
  first_name: StringFilter
  email: StringFilter
  phone: StringFilter
  indigenous_person: ContactIndigenousPersonTypeNullableFilter
  attachments: FileManyRelationFilter
  createdAt: DateTimeNullableFilter
  communications: CommunicationManyRelationFilter
}

input ContactIndigenousPersonTypeNullableFilter {
  equals: ContactIndigenousPersonType
  in: [ContactIndigenousPersonType!]
  notIn: [ContactIndigenousPersonType!]
  not: ContactIndigenousPersonTypeNullableFilter
}

input FileManyRelationFilter {
  every: FileWhereInput
  some: FileWhereInput
  none: FileWhereInput
}

input CommunicationManyRelationFilter {
  every: CommunicationWhereInput
  some: CommunicationWhereInput
  none: CommunicationWhereInput
}

input ContactOrderByInput {
  id: OrderDirection
  category_other: OrderDirection
  last_name: OrderDirection
  first_name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  indigenous_person: OrderDirection
  createdAt: OrderDirection
}

input ContactUpdateInput {
  category: [ContactCategoryType!]
  category_other: String
  last_name: String
  first_name: String
  email: String
  phone: String
  indigenous_person: ContactIndigenousPersonType
  attachments: FileRelateToManyForUpdateInput
  createdAt: DateTime
  communications: CommunicationRelateToManyForUpdateInput
}

input FileRelateToManyForUpdateInput {
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input CommunicationRelateToManyForUpdateInput {
  disconnect: [CommunicationWhereUniqueInput!]
  set: [CommunicationWhereUniqueInput!]
  create: [CommunicationCreateInput!]
  connect: [CommunicationWhereUniqueInput!]
}

input ContactUpdateArgs {
  where: ContactWhereUniqueInput!
  data: ContactUpdateInput!
}

input ContactCreateInput {
  category: [ContactCategoryType!]
  category_other: String
  last_name: String
  first_name: String
  email: String
  phone: String
  indigenous_person: ContactIndigenousPersonType
  attachments: FileRelateToManyForCreateInput
  createdAt: DateTime
  communications: CommunicationRelateToManyForCreateInput
}

input FileRelateToManyForCreateInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input CommunicationRelateToManyForCreateInput {
  create: [CommunicationCreateInput!]
  connect: [CommunicationWhereUniqueInput!]
}

type Communication {
  id: ID!
  contact: Contact
  individual: Contact
  communication_date: CalendarDay
  communication_type: CommunicationCommunicationTypeType
  notes: Communication_notes_Document
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

enum CommunicationCommunicationTypeType {
  PhoneCall
  Email
}

type Communication_notes_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CommunicationWhereUniqueInput {
  id: ID
}

input CommunicationWhereInput {
  AND: [CommunicationWhereInput!]
  OR: [CommunicationWhereInput!]
  NOT: [CommunicationWhereInput!]
  id: IDFilter
  contact: ContactWhereInput
  individual: ContactWhereInput
  communication_date: CalendarDayNullableFilter
  communication_type: CommunicationCommunicationTypeTypeNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input CommunicationCommunicationTypeTypeNullableFilter {
  equals: CommunicationCommunicationTypeType
  in: [CommunicationCommunicationTypeType!]
  notIn: [CommunicationCommunicationTypeType!]
  not: CommunicationCommunicationTypeTypeNullableFilter
}

input CommunicationOrderByInput {
  id: OrderDirection
  communication_date: OrderDirection
  communication_type: OrderDirection
}

input CommunicationUpdateInput {
  contact: ContactRelateToOneForUpdateInput
  individual: ContactRelateToOneForUpdateInput
  communication_date: CalendarDay
  communication_type: CommunicationCommunicationTypeType
  notes: JSON
}

input ContactRelateToOneForUpdateInput {
  create: ContactCreateInput
  connect: ContactWhereUniqueInput
  disconnect: Boolean
}

input CommunicationUpdateArgs {
  where: CommunicationWhereUniqueInput!
  data: CommunicationUpdateInput!
}

input CommunicationCreateInput {
  contact: ContactRelateToOneForCreateInput
  individual: ContactRelateToOneForCreateInput
  communication_date: CalendarDay
  communication_type: CommunicationCommunicationTypeType
  notes: JSON
}

input ContactRelateToOneForCreateInput {
  create: ContactCreateInput
  connect: ContactWhereUniqueInput
}

type Case {
  id: ID!
  isActive: Boolean
  case_number: Int
  geographic_area: String
  issues: [String!]
  rating: Int
  feedback: String
  action_taken_date: CalendarDay
  date_closed: DateTime
  attachments(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  attachmentsCount(where: FileWhereInput! = {}): Int
  notes: Case_notes_Document
}

type Case_notes_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CaseWhereUniqueInput {
  id: ID
}

input CaseWhereInput {
  AND: [CaseWhereInput!]
  OR: [CaseWhereInput!]
  NOT: [CaseWhereInput!]
  id: IDFilter
  case_number: IntFilter
  geographic_area: StringNullableFilter
  rating: IntNullableFilter
  action_taken_date: CalendarDayNullableFilter
  date_closed: DateTimeNullableFilter
  attachments: FileManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CaseOrderByInput {
  id: OrderDirection
  case_number: OrderDirection
  geographic_area: OrderDirection
  rating: OrderDirection
  feedback: OrderDirection
  action_taken_date: OrderDirection
  date_closed: OrderDirection
}

input CaseUpdateInput {
  case_number: Int
  geographic_area: String
  issues: [String!]
  rating: Int
  feedback: String
  action_taken_date: CalendarDay
  date_closed: DateTime
  attachments: FileRelateToManyForUpdateInput
  notes: JSON
}

input CaseUpdateArgs {
  where: CaseWhereUniqueInput!
  data: CaseUpdateInput!
}

input CaseCreateInput {
  case_number: Int
  geographic_area: String
  issues: [String!]
  rating: Int
  feedback: String
  action_taken_date: CalendarDay
  date_closed: DateTime
  attachments: FileRelateToManyForCreateInput
  notes: JSON
}

type Engagement {
  id: ID!
  activity: EngagementActivityType
  location: String
  issues: [String!]
  notes: Engagement_notes_Document
  attachments(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  attachmentsCount(where: FileWhereInput! = {}): Int
}

enum EngagementActivityType {
  Meeting
  Presentation
}

type Engagement_notes_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input EngagementWhereUniqueInput {
  id: ID
}

input EngagementWhereInput {
  AND: [EngagementWhereInput!]
  OR: [EngagementWhereInput!]
  NOT: [EngagementWhereInput!]
  id: IDFilter
  activity: EngagementActivityTypeNullableFilter
  location: StringFilter
  attachments: FileManyRelationFilter
}

input EngagementActivityTypeNullableFilter {
  equals: EngagementActivityType
  in: [EngagementActivityType!]
  notIn: [EngagementActivityType!]
  not: EngagementActivityTypeNullableFilter
}

input EngagementOrderByInput {
  id: OrderDirection
  activity: OrderDirection
  location: OrderDirection
}

input EngagementUpdateInput {
  activity: EngagementActivityType
  location: String
  issues: [String!]
  notes: JSON
  attachments: FileRelateToManyForUpdateInput
}

input EngagementUpdateArgs {
  where: EngagementWhereUniqueInput!
  data: EngagementUpdateInput!
}

input EngagementCreateInput {
  activity: EngagementActivityType
  location: String
  issues: [String!]
  notes: JSON
  attachments: FileRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createContact(data: ContactCreateInput!): Contact
  createContacts(data: [ContactCreateInput!]!): [Contact]
  updateContact(where: ContactWhereUniqueInput!, data: ContactUpdateInput!): Contact
  updateContacts(data: [ContactUpdateArgs!]!): [Contact]
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteContacts(where: [ContactWhereUniqueInput!]!): [Contact]
  createCommunication(data: CommunicationCreateInput!): Communication
  createCommunications(data: [CommunicationCreateInput!]!): [Communication]
  updateCommunication(where: CommunicationWhereUniqueInput!, data: CommunicationUpdateInput!): Communication
  updateCommunications(data: [CommunicationUpdateArgs!]!): [Communication]
  deleteCommunication(where: CommunicationWhereUniqueInput!): Communication
  deleteCommunications(where: [CommunicationWhereUniqueInput!]!): [Communication]
  createCase(data: CaseCreateInput!): Case
  createCases(data: [CaseCreateInput!]!): [Case]
  updateCase(where: CaseWhereUniqueInput!, data: CaseUpdateInput!): Case
  updateCases(data: [CaseUpdateArgs!]!): [Case]
  deleteCase(where: CaseWhereUniqueInput!): Case
  deleteCases(where: [CaseWhereUniqueInput!]!): [Case]
  createEngagement(data: EngagementCreateInput!): Engagement
  createEngagements(data: [EngagementCreateInput!]!): [Engagement]
  updateEngagement(where: EngagementWhereUniqueInput!, data: EngagementUpdateInput!): Engagement
  updateEngagements(data: [EngagementUpdateArgs!]!): [Engagement]
  deleteEngagement(where: EngagementWhereUniqueInput!): Engagement
  deleteEngagements(where: [EngagementWhereUniqueInput!]!): [Engagement]
  endSession: Boolean!
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contact(where: ContactWhereUniqueInput!): Contact
  contactsCount(where: ContactWhereInput! = {}): Int
  communications(where: CommunicationWhereInput! = {}, orderBy: [CommunicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommunicationWhereUniqueInput): [Communication!]
  communication(where: CommunicationWhereUniqueInput!): Communication
  communicationsCount(where: CommunicationWhereInput! = {}): Int
  cases(where: CaseWhereInput! = {}, orderBy: [CaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CaseWhereUniqueInput): [Case!]
  case(where: CaseWhereUniqueInput!): Case
  casesCount(where: CaseWhereInput! = {}): Int
  engagements(where: EngagementWhereInput! = {}, orderBy: [EngagementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EngagementWhereUniqueInput): [Engagement!]
  engagement(where: EngagementWhereUniqueInput!): Engagement
  engagementsCount(where: EngagementWhereInput! = {}): Int
  keystone: KeystoneMeta!
  groupedPosts: Statistics
}

type Statistics {
  draft: Int
  published: Int
  latest: Post
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
